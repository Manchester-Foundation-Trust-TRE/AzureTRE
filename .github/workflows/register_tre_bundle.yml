---
name: Register TRE Bundle

# This workflow is intended to be used to register a TRE bundle into an existing TRE environment

on:
  workflow_call:
    inputs:
      bundle_type:
        description: The type of bundle to register
        type: string
        required: true
  push:
    branches:
      - guybartal/publish-bundle-workflow
  workflow_dispatch:
    inputs:
      environment:
        description: The name of the Github Action's environment this will deploy into
        type: string
        default: CICD
        required: false
      bundle_type:
        description: The type of bundle to register
        type: string
        default: base
        required: true


jobs:
  prepare-not-main:
    name: Preparation
    runs-on: ubuntu-latest
    if: |
      github.ref != 'refs/heads/main'
    outputs:
      refid: ${{ steps.run-id.outputs.refid }}
    steps:
      - id: run-id
        name: Get run id
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # Debug output for checking SHA used in checks-action
          echo "git SHA:    $(git rev-parse --abbrev-ref HEAD)"
          echo "git ref:    $(git rev-parse HEAD)"
          echo "github sha: ${GITHUB_SHA}"
          echo "github ref: ${GITHUB_REF}"
          REFID=$(echo "${GITHUB_REF}" | shasum | cut -c1-8)
          echo "using id of: ${REFID} for GitHub Ref: ${GITHUB_REF}"
          echo "refid=${REFID}" >> "$GITHUB_OUTPUT"
  register_bundle:
    name: Register Bundle
    runs-on: ubuntu-latest
    needs: [prepare-not-main]
    # environment is used to access the secrets for Azure credentials
    # to sign in to a container registry to re-use a dev container image as a build cache
    # environment: ${{ inputs.environment || 'CICD'}}
    environment: 'CICD'
    permissions:
      checks: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Register Bundle
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: >-
            echo "Registering bundle of type ${{ inputs.bundle_type }}"

            # create a map of bundle_type to bundle_dir
            declare -A bundle_map
            bundle_map[workspace]="./templates/workspaces/base"
            bundle_map[unrestricted]="./templates/workspaces/unrestricted"
            bundle_map[airlock-import-review]="./templates/workspaces/airlock-import-review"
            bundle_map[guacamole]="./templates/workspace_services/guacamole"
            bundle_map[azureml]="./templates/workspace_services/azureml"
            bundle_map[gitea]="./templates/workspace_services/gitea"
            bundle_map[mysql]="./templates/workspace_services/mysql"
            bundle_map[health-services]="./templates/workspace_services/health-services"
            bundle_map[databricks]="./templates/workspace_services/databricks"
            bundle_map[ohdsi]="./templates/workspace_services/ohdsi"
            bundle_map[azuresql]="./templates/workspace_services/azuresql"
            bundle_map[openai]="./templates/workspace_services/openai"
            bundle_map[guacamole-azure-windowsvm]="./templates/workspace_services/guacamole/user_resources/guacamole-azure-windowsvm"
            bundle_map[guacamole-azure-linuxvm]="./templates/workspace_services/guacamole/user_resources/guacamole-azure-linuxvm"
            bundle_map[guacamole-azure-export-reviewvm]="./templates/workspace_services/guacamole/user_resources/guacamole-azure-export-reviewvm"
            bundle_map[guacamole-azure-import-reviewvm]="./templates/workspace_services/guacamole/user_resources/guacamole-azure-import-reviewvm"

            # if inputs.bundle_type is empty, use the default value
            if [ -z "${{ inputs.bundle_type }}" ]; then
              bundle_type="base"
            fi

            bundle_dir=${bundle_map[${{ inputs.bundle_type }}]}

            echo "Bundle directory: $bundle_dir"
            make bundle-register DIR="${bundle_dir}"
          DEVCONTAINER_TAG: latest
          AZURE_ENVIRONMENT: ${{ secrets.AZURE_ENVIRONMENT }}
          AAD_TENANT_ID: ${{ secrets.AAD_TENANT_ID }}
          ACR_NAME: ${{ format('tre{0}', needs.prepare-not-main.outputs.refid) }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          API_CLIENT_ID: ${{ secrets.API_CLIENT_ID }}
          API_CLIENT_SECRET: ${{ secrets.API_CLIENT_SECRET }}
          APPLICATION_ADMIN_CLIENT_ID: ${{ secrets.APPLICATION_ADMIN_CLIENT_ID }}
          APPLICATION_ADMIN_CLIENT_SECRET: ${{ secrets.APPLICATION_ADMIN_CLIENT_SECRET }}
          MGMT_RESOURCE_GROUP_NAME: ${{ format('rg-tre{0}-mgmt', needs.prepare-not-main.outputs.refid) }}
          MS_TEAMS_WEBHOOK_URI: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          MGMT_STORAGE_ACCOUNT_NAME: ${{ format('tre{0}mgmt', needs.prepare-not-main.outputs.refid) }}
          SWAGGER_UI_CLIENT_ID: ${{ secrets.SWAGGER_UI_CLIENT_ID }}
          TEST_APP_ID: ${{ secrets.TEST_APP_ID }}
          TEST_WORKSPACE_APP_ID: ${{ secrets.TEST_WORKSPACE_APP_ID }}
          TEST_WORKSPACE_APP_SECRET: ${{ secrets.TEST_WORKSPACE_APP_SECRET }}
          TEST_ACCOUNT_CLIENT_ID: "${{ secrets.TEST_ACCOUNT_CLIENT_ID }}"
          TEST_ACCOUNT_CLIENT_SECRET: "${{ secrets.TEST_ACCOUNT_CLIENT_SECRET }}"
          TRE_ID: ${{ format('tre{0}', needs.prepare-not-main.outputs.refid) }}
          CI_CACHE_ACR_NAME: ${{ secrets.ACR_NAME }}
